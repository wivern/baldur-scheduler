package net.anotheria.baldur.scheduler;

import net.anotheria.baldur.scheduler.job.SimpleJobListener;
import net.anotheria.baldur.scheduler.job.SimpleJobSupport;
import net.anotheria.portalkit.services.common.scheduledqueue.ScheduledQueue;
import net.anotheria.portalkit.services.common.scheduledqueue.ScheduledQueueException;
import net.anotheria.portalkit.services.common.scheduledqueue.ScheduledQueueFactory;
import org.apache.commons.cli.*;
import org.quartz.JobListener;
import org.quartz.SchedulerException;
import org.quartz.impl.SchedulerRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.management.ManagementFactory;
import java.util.Properties;

public class Scheduler {

    public static final String SCHEDULE_OPTION = "schedule";
    public static final String JOB_PROPERTIES = "job.properties";
    private static final Logger logger = LoggerFactory.getLogger(Scheduler.class);
    public static final int MAX_OBJECTS = 100;
    public static final String MAX_LOAD_OBJECTS_OPTION = "maxLoadObjects";

    public int getMaxLoadObjects() {
        return maxLoadObjects;
    }

    public void setMaxLoadObjects(int maxLoadObjects) {
        this.maxLoadObjects = maxLoadObjects;
    }

    private int maxLoadObjects = MAX_OBJECTS;

    public static void main(String[] args) {
        CommandLineParser parser = new BasicParser();
        try {
            Options options = buildOptions();
            CommandLine cmd = parser.parse(options, args);
            if (cmd.hasOption("h")) {
                printHelp(options);
            } else {
                if (cmd.hasOption(SCHEDULE_OPTION)) {
                    String cron = cmd.getOptionValue(SCHEDULE_OPTION);
                    if (cron != null && !cron.isEmpty()) {
                        Scheduler scheduler = new Scheduler();
                        if (cmd.hasOption(MAX_LOAD_OBJECTS_OPTION)){
                            scheduler.setMaxLoadObjects(Integer.valueOf(cmd.getOptionValue(MAX_LOAD_OBJECTS_OPTION)));
                        }
                        scheduler.start(cron);
                    } else {
                        throw new Exception("bad cron expression");
                    }
                } else {
                    throw new Exception("No schedule option");
                }
            }
        } catch (ParseException e) {
            logger.error("Scheduler failed to start", e);
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage());
        }
    }

    private static void printHelp(Options options) {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.printHelp("java -jar net.anotheria.baldur.scheduler.Scheduler", options);
    }

    private static Options buildOptions() {
        Options options = new Options();
        options.addOption("h", false, "prints this help");
        Option scheduleOption = OptionBuilder
                .withLongOpt(SCHEDULE_OPTION)
                .hasArg()
                .withArgName("cron")
                .withDescription("cron expression to run job at")
                .create("s");
        Option maxObjects = OptionBuilder
                .withLongOpt(MAX_LOAD_OBJECTS_OPTION)
                .hasArg()
                .withArgName("MAX_OBJECTS")
                .withDescription("Maximum number of loadable objects generated by job")
                .create();
        options.addOption(scheduleOption);
        options.addOption(maxObjects);
        return options;
    }

    public void start(String cron) {
        logger.info("Scheduling a job with cron: " + cron);
        SimpleJobSupport jobSupport = new SimpleJobSupport(maxLoadObjects);
        try {
            ScheduledQueue queue = ScheduledQueueFactory.create(JOB_PROPERTIES, jobSupport, jobSupport);
            queue.schedule(cron);
            addListener(new SimpleJobListener("SimpleJob"));
            System.out.println("PID: " + ManagementFactory.getRuntimeMXBean().getName());
        } catch (ScheduledQueueException e) {
            logger.error("Scheduler failed to schedule a job", e);
        }
    }

    private void addListener(JobListener listener) {
        SchedulerRepository repository = SchedulerRepository.getInstance();
        String jobName = getJobProperty("org.quartz.scheduler.instanceName");
        if (jobName != null) {
            org.quartz.Scheduler scheduler = repository.lookup(jobName);
            try {
                scheduler.getListenerManager().addJobListener(listener);
            } catch (SchedulerException e) {
                logger.error("Failed to get listener manager", e);
            }
        } else {
            logger.warn("Job name not found, listener wasn`t added.");
        }
    }

    private String getJobProperty(String property) {
        final Properties properties = new Properties();
        try {
            properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(JOB_PROPERTIES));
            return properties.getProperty(property);
        } catch (IOException e) {
            logger.error("Job properties was not loaded", e);
        }
        return null;
    }
}
